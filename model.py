# -*- coding: utf-8 -*-
"""gta-car-ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GelNyZcI_fIcAD6bbnBCxjs2AfxXOrNU
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip /content/drive/MyDrive/Projekty/dataset.zip

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd

traindf = pd.read_csv('/content/dataset/balanced_data2.csv', sep=';')
print(traindf)

def append_ext(fn):
    return fn+".png"
def round_values(val):
  return round(float(val), 2)
def rescale_angle(angle):
  return round((float(angle)/80) + 1/2, 2)

traindf=pd.read_csv('/content/dataset/balanced_data2.csv', sep=';', dtype='string')
traindf["ID"]=traindf["ID"].apply(append_ext)
traindf["Angle"]=traindf["Angle"].apply(rescale_angle)
traindf["Throttle"]=traindf["Throttle"].apply(round_values)
print(traindf)

datagen=tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255.,validation_split=0.1)
train_generator=datagen.flow_from_dataframe(
dataframe=traindf,
directory="/content/dataset",
x_col= 'ID',
y_col=["Angle", "Throttle"],
subset="training",
batch_size=16,
seed=42,
shuffle=True,
class_mode="multi_output",
target_size=(160,384))

validation_generator=datagen.flow_from_dataframe(
dataframe=traindf,
directory="/content/dataset",
x_col= 'ID',
y_col=["Angle", "Throttle"],
subset="validation",
batch_size=16,
seed=42,
shuffle=True,
class_mode="multi_output",
target_size=(160,384))

for _ in range(3):
     image, label = train_generator.next()
     plt.imshow(image[0])
     print("steering angle: ", label[0][0], "Throttle: ", label[1][0])
     print(np.shape(image))
     #plt.title(label[0], label[1])
     plt.show()

print()

from tensorflow import keras
from tensorflow.keras import layers

inputs = keras.Input(shape=(160,384,3)) ##Functional API
x = layers.Conv2D(filters = 32, kernel_size = 3, activation = "relu") (inputs)
x = layers.MaxPooling2D(pool_size=2) (x)
x = layers.Conv2D(filters = 64, kernel_size = 3, activation = "relu") (x)
x = layers.MaxPooling2D(pool_size=2) (x)
x = layers.Conv2D(filters = 128, kernel_size = 3, activation = "relu") (x)
x = layers.MaxPooling2D(pool_size=2) (x)
x = layers.Conv2D(filters = 256, kernel_size = 3, activation = "relu") (x)
x = layers.Flatten() (x)
x = layers.Dropout(0.1) (x)
x = layers.Dense(32, activation="relu") (x)
x = layers.Dropout(0.1) (x)
x = layers.Dense(8, activation="relu") (x)
x = layers.Dropout(0.1) (x)
outputs_angle = layers.Dense(1, activation="softmax", name='angle') (x)
outputs_throttle = layers.Dense(1, activation="softmax", name='throttle') (x)

model = keras.Model(inputs, outputs=[outputs_angle, outputs_throttle])
print(model.summary())

model.compile(loss={'angle': 'mean_squared_error', 
                    'throttle': 'mean_squared_error'},
              optimizer='adam')

callbacks = [
    keras.callbacks.ModelCheckpoint(
        filepath="/content/drive/MyDrive/gta-car-ai",
        save_best_only = True,
        monitor = "val_loss")
]

STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size
STEP_SIZE_VALID=validation_generator.n//validation_generator.batch_size

history = model.fit_generator(generator=train_generator, steps_per_epoch=STEP_SIZE_TRAIN, validation_data=validation_generator, validation_steps=STEP_SIZE_VALID, epochs = 8, callbacks=callbacks)